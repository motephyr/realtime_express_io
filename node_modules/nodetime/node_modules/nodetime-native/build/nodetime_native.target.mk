# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := nodetime_native
DEFS_Debug := \
<<<<<<< HEAD
	'-D_DARWIN_USE_64_BIT_INODE=1' \
=======
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
<<<<<<< HEAD
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing
=======
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
<<<<<<< HEAD
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/fredericstgo/.node-gyp/0.10.32/src \
	-I/Users/fredericstgo/.node-gyp/0.10.32/deps/uv/include \
	-I/Users/fredericstgo/.node-gyp/0.10.32/deps/v8/include

DEFS_Release := \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
=======
	-fno-exceptions

INCS_Debug := \
	-I/home/fredericgo/.node-gyp/0.10.34/src \
	-I/home/fredericgo/.node-gyp/0.10.34/deps/uv/include \
	-I/home/fredericgo/.node-gyp/0.10.34/deps/v8/include

DEFS_Release := \
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
<<<<<<< HEAD
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing
=======
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
<<<<<<< HEAD
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/fredericstgo/.node-gyp/0.10.32/src \
	-I/Users/fredericstgo/.node-gyp/0.10.32/deps/uv/include \
	-I/Users/fredericstgo/.node-gyp/0.10.32/deps/v8/include
=======
	-fno-exceptions

INCS_Release := \
	-I/home/fredericgo/.node-gyp/0.10.34/src \
	-I/home/fredericgo/.node-gyp/0.10.34/deps/uv/include \
	-I/home/fredericgo/.node-gyp/0.10.34/deps/v8/include
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8

OBJS := \
	$(obj).target/$(TARGET)/src/nodetime_native.o \
	$(obj).target/$(TARGET)/src/gc.o \
	$(obj).target/$(TARGET)/src/profiler.o \
	$(obj).target/$(TARGET)/src/system_posix.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
<<<<<<< HEAD
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))
=======
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
<<<<<<< HEAD
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Debug := \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Release := \
	-Wl,-search_paths_first

LIBS := \
	-undefined dynamic_lookup

$(builddir)/nodetime_native.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/nodetime_native.node: LIBS := $(LIBS)
$(builddir)/nodetime_native.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/nodetime_native.node: TOOLSET := $(TOOLSET)
$(builddir)/nodetime_native.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/nodetime_native.node
=======
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/nodetime_native.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/nodetime_native.node: LIBS := $(LIBS)
$(obj).target/nodetime_native.node: TOOLSET := $(TOOLSET)
$(obj).target/nodetime_native.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/nodetime_native.node
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8
# Add target alias
.PHONY: nodetime_native
nodetime_native: $(builddir)/nodetime_native.node

<<<<<<< HEAD
# Short alias for building this executable.
.PHONY: nodetime_native.node
nodetime_native.node: $(builddir)/nodetime_native.node
=======
# Copy this to the executable output path.
$(builddir)/nodetime_native.node: TOOLSET := $(TOOLSET)
$(builddir)/nodetime_native.node: $(obj).target/nodetime_native.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/nodetime_native.node
# Short alias for building this executable.
.PHONY: nodetime_native.node
nodetime_native.node: $(obj).target/nodetime_native.node $(builddir)/nodetime_native.node
>>>>>>> 166db6e5b6e3d475aca7d002bfc4d0b8c108e2f8

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/nodetime_native.node

